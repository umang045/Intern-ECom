Railway MySQL Deployment Guide
============================

Prerequisites:
-------------
1. Railway CLI installed
2. MySQL client installed
3. Your SQL backup file (deploybackup.sql)

Step 1: Railway Account Setup
----------------------------
1. Create an account on Railway.app if you haven't already
2. Install Railway CLI:
   npm install -g @railway/cli

Step 2: Railway Login
--------------------
1. Open terminal and run:
   railway login --browserless

2. You'll get a pairing code. Visit Railway's website and enter this code.

Step 3: Create MySQL Service on Railway
-------------------------------------
1. Go to Railway.app dashboard
2. Click "New Project" or select existing project
3. Click "Add Service"
4. Select "Database" → "MySQL"
5. Wait for the database to be provisioned

Step 4: Get Database Credentials
------------------------------
1. In Railway dashboard, click on your MySQL service
2. Go to "Connect" tab
3. You'll find these important variables:
   - MYSQL_DATABASE: railway
   - MYSQL_HOST: caboose.proxy.rlwy.net (example)
   - MYSQL_PORT: 11200 (example)
   - MYSQL_USER: root
   - MYSQL_PASSWORD: [your-password]
   - MYSQL_URL: mysql://root:[password]@[host]:[port]/railway

Step 5: Link Your Project
------------------------
1. Navigate to your project directory in terminal:
   cd your-project-directory

2. Link to Railway project:
   railway link

3. Select your:
   - Team
   - Project
   - Environment (production)
   - Service (MySQL)

Step 6: Import Database
----------------------
Method 1 - Using MySQL Command (Recommended):
------------------------------------------
1. Open terminal/command prompt (cmd.exe, not PowerShell)
2. Navigate to the directory containing your SQL file:
   cd path/to/your/sql/file

3. Run the import command:
   mysql -h [host] -P [port] -u root -p[password] railway < deploybackup.sql

   Example:
   mysql -h caboose.proxy.rlwy.net -P 11200 -u root -pYourPasswordHere railway < deploybackup.sql

   Note: Replace YourPasswordHere with your actual password (no space after -p)

Method 2 - Using MySQL Workbench:
-------------------------------
1. Open MySQL Workbench
2. Create new connection:
   - Connection Name: Railway MySQL
   - Hostname: [your-host] (e.g., caboose.proxy.rlwy.net)
   - Port: [your-port] (e.g., 11200)
   - Username: root
   - Password: [your-password]
   - Default Schema: railway

3. Connect to the database
4. Go to Server → Data Import
5. Choose 'Import from Self-Contained File'
6. Select your deploybackup.sql file
7. Start Import

Step 7: Verify Deployment
------------------------
1. Check if database is accessible:
   mysql -h [host] -P [port] -u root -p[password] railway -e "SHOW TABLES;"

2. This should display all your tables:
   - cart
   - colors
   - order_items
   - orders
   - password_reset
   - payment
   - product_category
   - products
   - reviews
   - role
   - transaction
   - users

Troubleshooting
--------------
1. Connection Issues:
   - Verify your IP is whitelisted in Railway dashboard
   - Check if credentials are correct
   - Ensure you're using the public URL (ends with .rlwy.net)

2. Import Errors:
   - Check SQL file format
   - Ensure file path is correct
   - Verify database permissions

3. PowerShell Issues:
   - Use Command Prompt (cmd.exe) instead of PowerShell for MySQL commands
   - Or use MySQL Workbench for GUI-based import

Important Notes
--------------
1. Keep your database credentials secure
2. Don't share your MYSQL_PASSWORD publicly
3. Regular backups are recommended
4. Monitor database usage in Railway dashboard
5. Set up environment variables in your application to use these credentials 

Useful Commands Reference
------------------------
Railway CLI Commands:
-------------------
1. Project Management:
   - railway login                    # Login to Railway
   - railway logout                   # Logout from Railway
   - railway init                     # Initialize a new project
   - railway link                     # Link to existing project
   - railway unlink                   # Unlink from current project
   - railway status                   # Check project status
   - railway up                       # Deploy your project
   - railway down                     # Remove deployment

2. Environment Variables:
   - railway vars                     # List all variables
   - railway vars set KEY=VALUE       # Set a variable
   - railway vars remove KEY          # Remove a variable

3. Service Management:
   - railway service list            # List all services
   - railway connect                 # Connect to a service
   - railway disconnect              # Disconnect from service

4. Database Operations:
   - railway run mysql               # Run MySQL CLI
   - railway service logs            # View service logs

Useful MySQL Commands:
--------------------
1. Database Operations:
   - SHOW DATABASES;                          # List all databases
   - USE railway;                             # Switch to railway database
   - SHOW TABLES;                             # List all tables
   - DESCRIBE table_name;                     # Show table structure

2. Backup and Restore:
   # Create backup (run in terminal)
   mysqldump -h [host] -P [port] -u root -p[password] railway > backup.sql

   # Restore backup (run in terminal)
   mysql -h [host] -P [port] -u root -p[password] railway < backup.sql

3. Table Operations:
   - SELECT * FROM table_name LIMIT 5;        # View first 5 rows
   - SELECT COUNT(*) FROM table_name;         # Count rows
   - SHOW CREATE TABLE table_name;            # Show create statement

4. User Management:
   - SELECT USER();                           # Show current user
   - SHOW GRANTS;                             # Show user permissions

5. System Information:
   - STATUS;                                  # Show server status
   - SHOW VARIABLES;                          # Show system variables
   - SELECT VERSION();                        # Show MySQL version

6. Monitoring Queries:
   - SHOW PROCESSLIST;                        # Show running queries
   - KILL query_id;                           # Kill a specific query

7. Table Maintenance:
   - ANALYZE TABLE table_name;                # Analyze table
   - OPTIMIZE TABLE table_name;               # Optimize table
   - REPAIR TABLE table_name;                 # Repair table

8. Common Troubleshooting:
   - SHOW ENGINE INNODB STATUS\G             # Check InnoDB status
   - SHOW OPEN TABLES;                       # Show open tables
   - SHOW ERRORS;                            # Show errors
   - SHOW WARNINGS;                          # Show warnings

Connection String Formats:
------------------------
1. Standard Format:
   mysql -h [host] -P [port] -u root -p[password] railway

2. URL Format:
   mysql://root:[password]@[host]:[port]/railway

3. Connection Testing:
   mysqladmin -h [host] -P [port] -u root -p[password] ping

Security Best Practices:
----------------------
1. Always use environment variables for credentials
2. Regularly rotate passwords
3. Use SSL/TLS for connections when available
4. Limit database access to specific IP addresses
5. Regular security audits of user permissions 

Node.js Backend Deployment Guide
------------------------------
Prerequisites:
- Node.js and npm installed
- Git installed
- Railway CLI installed and logged in
- Backend code ready with package.json

Step 1: Prepare Your Backend Code
-------------------------------
1. Ensure your backend directory has:
   - package.json with all dependencies
   - Proper start script in package.json:
     ```json
     {
       "scripts": {
         "start": "node index.js"
       }
     }
     ```
   - .gitignore file with:
     ```
     node_modules/
     .env
     ```

2. Test locally:
   npm install
   npm start

Step 2: Initialize Git (if not already done)
-----------------------------------------
1. In your backend directory:
   git init
   git add .
   git commit -m "Initial commit for deployment"

Step 3: Deploy to Railway
-----------------------
Method 1 - Using Railway CLI (Recommended):
1. Navigate to backend directory:
   cd backend

2. Initialize Railway project:
   railway init

3. Link to your project:
   railway link

4. Deploy your application:
   railway up

Method 2 - Using Railway Dashboard:
1. Go to Railway dashboard
2. Create new project or select existing
3. Choose "Deploy from Git"
4. Select your repository
5. Configure build settings:
   - Root Directory: ./backend
   - Build Command: npm install
   - Start Command: npm start

Step 4: Configure Environment Variables
-----------------------------------
1. In Railway dashboard:
   - Go to your backend service
   - Click "Variables"
   - Add your environment variables:
     ```
     PORT=5000
     MYSQL_HOST=your-mysql-host
     MYSQL_USER=root
     MYSQL_PASSWORD=your-password
     MYSQL_DATABASE=railway
     MYSQL_PORT=your-port
     ```

2. Or using Railway CLI:
   railway vars set PORT=5000
   railway vars set MYSQL_HOST=your-mysql-host
   # ... set other variables

Step 5: Verify Deployment
-----------------------
1. Check deployment status:
   railway status

2. View logs:
   railway logs

3. Get your deployment URL:
   railway domain

4. Test your API endpoints using the provided URL

Troubleshooting Backend Deployment
--------------------------------
1. Build Failures:
   - Check build logs in Railway dashboard
   - Verify all dependencies are in package.json
   - Ensure start script is correct

2. Runtime Errors:
   - Check application logs: railway logs
   - Verify environment variables
   - Check database connection

3. Common Issues:
   - Port configuration: Make sure to use process.env.PORT
   - Database connection: Use correct connection string
   - CORS issues: Configure proper CORS settings

4. Performance Monitoring:
   - Monitor CPU and Memory usage in Railway dashboard
   - Check response times
   - Monitor database connections

Important Backend Deployment Notes
--------------------------------
1. Always use environment variables for sensitive data
2. Set up proper error handling and logging
3. Configure CORS for your frontend domain
4. Set up health check endpoints
5. Keep dependencies updated
6. Monitor API rate limits and usage 

Frontend Deployment Guide (React/Vite)
-----------------------------------
Prerequisites:
- Node.js and npm installed
- Git installed
- Railway CLI installed and logged in
- Frontend code ready with package.json

Step 1: Prepare Frontend for Production
------------------------------------
1. Update environment variables:
   Create or modify .env file:
   ```
   VITE_API_URL=your-backend-railway-url
   ```

2. Create or update vite.config.js:
   ```javascript
   import { defineConfig } from 'vite'
   import react from '@vitejs/plugin-react'

   export default defineConfig({
     plugins: [react()],
     server: {
       port: 3000
     },
     build: {
       outDir: 'dist',
       sourcemap: false
     }
   })
   ```

3. Add build script in package.json:
   ```json
   {
     "scripts": {
       "build": "vite build",
       "start": "serve dist"
     }
   }
   ```

4. Install serve package:
   npm install -g serve

Step 2: Create Deployment Files
----------------------------
1. Create Dockerfile in frontend directory:
   ```dockerfile
   FROM node:18-alpine

   WORKDIR /app

   COPY package*.json ./

   RUN npm install

   COPY . .

   RUN npm run build

   EXPOSE 3000

   CMD ["npm", "start"]
   ```

2. Create railway.toml:
   ```toml
   [build]
   builder = "nixpacks"
   buildCommand = "npm install && npm run build"

   [deploy]
   startCommand = "npm start"
   restartPolicyType = "ON_FAILURE"
   restartPolicyMaxRetries = 10
   ```

Step 3: Deploy Frontend to Railway
-------------------------------
1. Navigate to frontend directory:
   cd frontend

2. Initialize git (if not done):
   git init
   git add .
   git commit -m "Initial frontend commit"

3. Link to Railway:
   railway link

4. Deploy:
   railway up

Step 4: Configure Environment Variables
-----------------------------------
1. In Railway dashboard:
   - Go to frontend service
   - Click "Variables"
   - Add:
     ```
     PORT=3000
     NODE_ENV=production
     VITE_API_URL=your-backend-url
     ```

Step 5: Verify Deployment
-----------------------
1. Get frontend URL:
   railway domain

2. Test the application:
   - Open the URL in browser
   - Test all features
   - Verify API connections

Troubleshooting Frontend Deployment
--------------------------------
1. Build Issues:
   - Check build logs in Railway dashboard
   - Verify all dependencies in package.json
   - Check vite.config.js settings
   - Ensure node_modules is in .gitignore

2. Runtime Issues:
   - Check environment variables
   - Verify API URL is correct
   - Check CORS settings in backend
   - Monitor console for errors

3. Common Problems:
   - 404 errors: Check router configuration
   - API connection fails: Verify VITE_API_URL
   - Styling issues: Check if CSS is building
   - White screen: Check build output

4. Performance Issues:
   - Enable source maps if needed
   - Check bundle size
   - Monitor loading times
   - Verify lazy loading

Complete Deployment Verification
-----------------------------
1. Backend Health Check:
   - API endpoints working
   - Database connected
   - Environment variables set
   - Logs showing activity

2. Frontend Status:
   - Pages loading correctly
   - API calls successful
   - Styles applied properly
   - No console errors

3. Integration Points:
   - Authentication working
   - Data flowing between services
   - File uploads functioning
   - Real-time features working

4. Security Checks:
   - HTTPS enabled
   - CORS properly configured
   - Environment variables secured
   - No sensitive data exposed

Deployment URLs and Access
------------------------
1. Frontend URL:
   https://your-frontend-app.railway.app

2. Backend API URL:
   https://your-backend-api.railway.app

3. Database Connection:
   Host: your-mysql-host.railway.app
   Port: your-port
   Database: railway

Important Final Notes
-------------------
1. Keep deployment credentials secure
2. Regularly monitor both services
3. Set up automated backups
4. Monitor usage and costs
5. Keep dependencies updated
6. Document API endpoints
7. Set up monitoring alerts 

Frontend Deployment (Vercel)
--------------------------
1. Create a GitHub repository:
   - Go to github.com and create a new repository
   - Name it "ecloth-frontend"
   - Make it public
   - Don't initialize with README

2. Push code to GitHub:
   ```bash
   cd frontend
   git init
   git add .
   git commit -m "Initial commit"
   git branch -M main
   git remote add origin https://github.com/YOUR_USERNAME/ecloth-frontend.git
   git push -u origin main
   ```

3. Deploy to Vercel:
   - Go to vercel.com
   - Click "Add New Project"
   - Import your GitHub repository
   - Configure project:
     * Framework Preset: Vite
     * Build Command: npm run build
     * Output Directory: dist
     * Install Command: npm install
   - Add Environment Variables:
     ```
     VITE_API_URL=your-railway-backend-url
     VITE_GOOGLE_MAPS_API_KEY=your_maps_api_key
     ```
   - Deploy

4. Verify deployment:
   - Open the Vercel deployment URL
   - Test all features
   - Check API connections

Troubleshooting
--------------
1. Build Errors:
   - Check Node.js version (use v18)
   - Verify package.json dependencies
   - Review build logs in Vercel dashboard

2. API Connection Issues:
   - Verify VITE_API_URL is correct
   - Check CORS configuration in backend
   - Test API endpoints

3. Runtime Errors:
   - Check browser console
   - Review Vercel function logs
   - Verify environment variables

Maintenance
----------
1. Updates and Deployments:
   - Push changes to GitHub
   - Vercel auto-deploys from main branch
   - Monitor build status

2. Environment Management:
   - Use Vercel dashboard for env vars
   - Keep production and preview separate
   - Regularly rotate sensitive credentials

3. Performance Monitoring:
   - Use Vercel Analytics
   - Monitor API response times
   - Check error rates

Security Best Practices
---------------------
1. Environment Variables:
   - Never commit .env files
   - Use Vercel's environment management
   - Rotate credentials regularly

2. Access Control:
   - Restrict admin dashboard access
   - Implement proper authentication
   - Use secure session management

3. Data Protection:
   - Validate all user inputs
   - Sanitize data before storage
   - Implement rate limiting

Backup and Recovery
-----------------
1. Code Backup:
   - GitHub repository serves as backup
   - Keep local backup of configuration
   - Document custom modifications

2. Database Backup:
   - Regular MySQL dumps
   - Store backups securely
   - Test restoration process

3. Recovery Steps:
   - Clone repository
   - Restore environment variables
   - Deploy to new instance if needed

Final Deployment Architecture
---------------------------
1. Frontend (Vercel):
   - URL: https://your-app.vercel.app
   - Static files served by Vercel's CDN
   - Automatic HTTPS and SSL

2. Backend (Railway):
   - URL: https://your-backend.railway.app
   - Node.js server running Express
   - API endpoints and business logic

3. Database (Railway MySQL):
   - Host: your-mysql-host.railway.app
   - Secure connection via Railway's network

Integration Points
----------------
1. Frontend to Backend:
   - API calls from Vercel to Railway
   - CORS configured for Vercel domain
   - Secure data transmission

2. Backend to Database:
   - Persistent MySQL connection
   - Connection pool management
   - Secure credentials

Security Considerations
---------------------
1. Environment Variables:
   - Frontend: Stored in Vercel
   - Backend: Stored in Railway
   - No credentials in code

2. CORS Configuration:
   - Backend allows Vercel domain
   - Prevents unauthorized access
   - Secure API endpoints

3. Database Security:
   - Railway managed security
   - Private network access
   - Regular backups

Monitoring and Maintenance
------------------------
1. Vercel Dashboard:
   - Frontend performance
   - Deployment status
   - Error tracking

2. Railway Dashboard:
   - Backend logs
   - Database metrics
   - Resource usage

3. Regular Tasks:
   - Monitor error logs
   - Update dependencies
   - Backup database
   - Check security updates 

Vercel Deployment Troubleshooting Guide
------------------------------------

1. npm install Errors
   Problem: "Command 'npm install' exited with 1"
   Solutions:
   - Try different install commands in vercel.json:
     ```json
     {
       "installCommand": "npm install --legacy-peer-deps"
     }
     ```
   - Or:
     ```json
     {
       "installCommand": "npm install --force"
     }
     ```
   - Clean node_modules and package-lock.json locally:
     ```bash
     rm -rf node_modules package-lock.json
     npm install
     ```
   - Check Node.js version compatibility:
     ```json
     {
       "engines": {
         "node": "18.x"
       }
     }
     ```

2. Build Errors
   Problem: Vite build fails
   Solutions:
   - Verify vite configuration:
     ```json
     {
       "buildCommand": "npm run build",
       "outputDirectory": "dist",
       "framework": "vite"
     }
     ```
   - Check build script in package.json:
     ```json
     {
       "scripts": {
         "build": "vite build",
         "vercel-build": "vite build"
       }
     }
     ```

3. Environment Variable Issues
   Problem: API or external service connections fail
   Solutions:
   - Verify environment variables in Vercel dashboard:
     ```
     VITE_API_URL=https://mysql-fuco-production.up.railway.app
     VITE_GOOGLE_MAPS_API_KEY=your_api_key
     ```
   - Check variable naming (must start with VITE_)
   - Verify values in both Preview and Production environments

4. Dependency Conflicts
   Common Issues:
   - React version mismatches
   - Peer dependency conflicts
   - Incompatible package versions
   
   Solutions:
   - Use --legacy-peer-deps flag
   - Update problematic dependencies:
     ```json
     {
       "dependencies": {
         "react": "^18.2.0",
         "react-dom": "^18.2.0",
         "vite": "^4.5.0"
       }
     }
     ```
   - Remove unused/conflicting packages
   - Check package.json for duplicate dependencies

5. Runtime Errors
   Problem: Application crashes after successful deployment
   Solutions:
   - Check browser console for errors
   - Verify API endpoints are accessible
   - Test locally with production build:
     ```bash
     npm run build
     npm run preview
     ```
   - Review CORS settings in backend

6. Deployment Strategy
   If CLI deployment fails:
   a) Use Vercel Dashboard:
      - Import repository directly
      - Configure build settings manually
      - Set environment variables
      - Enable automatic deployments

   b) Manual Deployment:
      - Push to GitHub
      - Let Vercel auto-deploy
      - Monitor build logs
      - Check deployment status

7. Version Control
   - Keep clean git history
   - Use .gitignore properly:
     ```
     node_modules/
     dist/
     .env
     .env.local
     ```
   - Commit package.json changes
   - Track vercel.json changes

8. Performance Optimization
   - Minimize bundle size
   - Optimize images and assets
   - Enable caching
   - Use code splitting
   - Implement lazy loading

9. Security Considerations
   - Protect API keys
   - Use environment variables
   - Configure CORS properly
   - Implement rate limiting
   - Secure user data

10. Monitoring and Logging
    - Use Vercel Analytics
    - Monitor error rates
    - Track API performance
    - Set up alerts
    - Review deployment logs

Quick Recovery Steps
------------------
1. If deployment fails:
   - Check build logs
   - Verify environment variables
   - Review dependency versions
   - Try clean install
   - Use dashboard deployment

2. If application crashes:
   - Review browser console
   - Check API connections
   - Verify environment setup
   - Test locally first
   - Monitor error logs

3. For dependency issues:
   - Use --legacy-peer-deps
   - Update core packages
   - Remove conflicts
   - Clean install
   - Check compatibility

Remember:
- Always test locally before deploying
- Keep dependencies updated
- Monitor error logs
- Maintain clean git history
- Document configuration changes 